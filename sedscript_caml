1 a\
(* This file is part of the MLCUDDIDL Library, released under LGPL license.\
\ \ \ Please read the COPYING file packaged in the distribution  *)
s/type man__dt/(** CUDD Manager *)\
\
type d\
  (** Indicates that a CUDD manager manipulates standard ADDs with leaves of type C double *)\
/g;
s/and man__vt/type v\
  (** Indicates that a CUDD manager manipulates ``custom'' ADDs with leaves of type an [OCaml] value, see modules {!Mtbdd} and {!Mtbddc}. A manager cannot manipulate the two types of ADDs (for garbage collection reasons) *)\
/g; 
s/and man__t/type 'a t\
  (** Type of CUDD managers, where ['a] is either [d] or [v]*)/g; 
s/and reorder/\
(** Reordering method. *)\
type reorder/g; 
s/and aggregation/\
(** Type of aggregation methods. *)\
type aggregation/g; 
s/and lazygroup/\
(** Group type for lazy sifting. *)\
type lazygroup/g; 
s/and vartype/\
(** Variable type. Currently used only in lazy sifting. *)\
type vartype/g; 
s/and mtr/\
(** Is variable order inside group fixed or not ? *)\
type mtr/g; 
s/and error/\
(** Type of error when CUDD raises an exception. *)\
type error/g; 
s/Man.man__dt/Man.d Man.t/g;  
s/Man.man__vt/Man.v Man.t/g;  
s/Man.man__t/'a Man.t/g;  
s/man__dt/dt/g;  
s/man__vt/vt/g;  
s/man__t/'a t/g;
s/type hash__t/(** User hashtables *)\
\
type t\
  (** Abstract type for user hashtables *)/g;
s/hash__t/t/g;
s/type cache__t/(** Local caches *)\
\
type t\
  (** Abstract type for local caches *)/g;
s/cache__t/t/g;
s/type memo_discr =/(** Memoization policy *)\
\
type memo_discr =/g;
s/and memo_union =/\
(** Type of memoization table *)\
type t =/g;
s/  | Global/  | Global           (** CUDD global cache (arity no more than 2, currently) *)/g;
s/  | Cache of Cache.t/  | Cache of Cache.t (** CUDD local cache *)/g;
s/  | Hash of Hash.t/  | Hash of Hash.t   (** CUDD local hash table\
\
	  It is up to the user to clear regularly such a\
	  table. Forgetting to do so will prevent garbage\
	  collection of nodes stored in the table, which can only\
	  grows, unlike local caches. *)/g;
s/and memo__t = memo_union//g;
s/memo__t/t/g;
s/type bdd__dt/(** Binary Decision Diagrams *)\
/g;
s/and bdd__vt//g;
s/and bdd__t/type 'a t\
  (** Abstract type for BDDs.\
\
    Objects of type ['a t] contain both the top node of the BDD and the manager to which this node belongs. ['a], which is either {!Man.d} or {!Man.v} indicates the kind of manager to which the node belongs, see module {!Man}. The manager can be retrieved with {!manager}.  These objects are automatically garbage collected.*)\
/g; 
s/Bdd.bdd__dt/Bdd.dt/g;  
s/Bdd.bdd__vt/Bdd.vt/g;  
s/Bdd.bdd__t/'a Bdd.t/g;  
s/bdd__dt/dt/g;  
s/bdd__vt/vt/g;  
s/bdd__t/'a t/g;  
s/type add__t/(** MTBDDs with floats (CUDD ADDs) *)\
\
type t\
  (** Abstract type for ADDs (that are necessarily attached to a manager of type [Man.d Man.t]).\
\
    Objects of this type contains both the top node of the ADD and the manager to which the node belongs. The manager can be retrieved with {!manager}. Objects of this type are automatically garbage collected. *)\
/g;
s/add__t/t/g;  
s/type vdd__t/(** MTBDDs with OCaml values (INTERNAL) *)\
\
type +'a t\
  (** Type of VDDs (that are necessarily attached to a manager of type [Man.v Man.t]).\
\
    Objects of this type contains both the top node of the ADD and the manager to which the node belongs. The manager can be retrieved with {!manager}. Objects of this type are automatically garbage collected. *)\
/g;  
s/Vdd.vdd__t/'a Vdd.t/g;
s/vdd__t/'a t/g;
s/and vdd__leaf//g;
s/vdd__leaf/'a/g;  
s/type pid/(** Custom Operations on VDDs*)\
\
(** Type of identifiers *)\
type pid\
/g;
s/and common =/\
(** Common information *)\
type common =/g;
s/and op1 =/\
(** Unary operation *)\
type ('a,'b) op1 =/g;
s/  closure1: mlvalue/  closure1: 'a -> 'b/g;
s/and op2 =/\
(** Binary operation *)\
type ('a,'b,'c) op2 =/g;
s/  closure2: mlvalue/  closure2: 'a -> 'b -> 'c/g;
s/  ospecial2: mlvalue/  ospecial2: ('a Vdd.t -> 'b Vdd.t -> 'c Vdd.t option) option/g;
s/and test2 =/\
(** Binary test *)\
type ('a,'b) test2 =/g;
s/  closure2t: mlvalue/  closure2t: 'a -> 'b -> bool/g;
s/  ospecial2t: mlvalue/  ospecial2t: ('a Vdd.t -> 'b Vdd.t -> bool option) option/g;
s/and op3 =/\
(** Ternary operation *)\
type ('a,'b,'c,'d) op3 =/g;
s/  closure3: mlvalue/  closure3: 'a -> 'b -> 'c -> 'd/g;
s/  ospecial3: mlvalue/  ospecial3: ('a Vdd.t -> 'b Vdd.t -> 'c Vdd.t -> 'd Vdd.t option) option/g;
s/and opN =/\
(** N-ary operation *)\
type ('a,'b) opN =/g;
s/  closureN: mlvalue/  closureN: Bdd.vt array -> 'a Vdd.t array -> 'b Vdd.t option/g;
s/and opG =/\
(** N-ary general operation *)\
type ('a,'b) opG =/g;
s/  closureG: mlvalue/  closureG: Bdd.vt array -> 'a Vdd.t array -> 'b Vdd.t option/g;
s/  oclosureBeforeRec: mlvalue/  oclosureBeforeRec: (int*bool -> Bdd.vt array -> 'a Vdd.t array -> (Bdd.vt array * 'a Vdd.t array)) option/g;
s/  oclosureIte: mlvalue/  oclosureIte: (int -> 'b Vdd.t -> 'b Vdd.t -> 'b Vdd.t) option/g;
s/and exist =/\
(** Existential quantification *)\
type 'a exist =/g;
s/  combineexist: op2/  combineexist: ('a,'a,'a) op2/g;
s/and existand =/\
(** Existential quantification combined with intersection *)\
type 'a existand =/g;
s/  combineexistand: op2/  combineexistand: ('a,'a,'a) op2/g;
s/  bottomexistand: mlvalue/  bottomexistand: 'a/g;
s/and existop1 =/\
(** Existop1ential quantification *)\
type ('a,'b) existop1 =/g;
s/  combineexistop1: op2/  combineexistop1: ('b,'b,'b) op2/g;
s/  existop1: op1/  existop1: ('a,'b) op1/g;
s/and existandop1 =/\
(** Existential quantification combined with intersection *)\
type ('a,'b) existandop1 =/g;
s/  combineexistandop1: op2/  combineexistandop1: ('b,'b,'b) op2/g;
s/  existandop1: op1/  existandop1: ('a,'b) op1/g;
s/  bottomexistandop1: mlvalue/  bottomexistandop1: 'b/g;
s/apply_op1 : op1 -> 'a Vdd.t -> 'a Vdd.t/apply_op1 : ('a,'b) op1 -> 'a Vdd.t -> 'b Vdd.t/g;
s/apply_op2 : op2 -> 'a Vdd.t -> 'a Vdd.t -> 'a Vdd.t/apply_op2 : ('a,'b,'c) op2 -> 'a Vdd.t -> 'b Vdd.t -> 'c Vdd.t/g;
s/apply_op3 : op3 -> 'a Vdd.t -> 'a Vdd.t -> 'a Vdd.t -> 'a Vdd.t/apply_op3 : ('a,'b,'c,'d) op3 -> 'a Vdd.t -> 'b Vdd.t -> 'c Vdd.t -> 'd Vdd.t/g;
s/apply_test2 : test2 -> 'a Vdd.t -> 'a Vdd.t -> bool/apply_test2 : ('a,'b) test2 -> 'a Vdd.t -> 'b Vdd.t -> bool/g;
s/apply_existop1 : existop1 -> 'a Bdd.t -> 'a Vdd.t -> 'a Vdd.t/apply_existop1 : ('a,'b) existop1 -> Bdd.vt -> 'a Vdd.t -> 'b Vdd.t/g;
s/apply_existandop1 : existandop1 -> 'a Bdd.t -> 'a Bdd.t -> 'a Vdd.t -> 'a Vdd.t/apply_existandop1 : ('a,'b) existandop1 -> Bdd.vt -> Bdd.vt -> 'a Vdd.t -> 'b Vdd.t/g;
s/apply_exist : exist -> 'a Bdd.t -> 'a Vdd.t -> 'a Vdd.t/apply_exist : 'a exist -> Bdd.vt -> 'a Vdd.t -> 'a Vdd.t/g;
s/apply_existand : existand -> 'a Bdd.t -> 'a Bdd.t -> 'a Vdd.t -> 'a Vdd.t/apply_existand : 'a existand -> Bdd.vt -> Bdd.vt -> 'a Vdd.t -> 'a Vdd.t/g;
s/external hash_/external /g;
s/external cache_/external /g;
s/external man_/external /g;
s/external bdd_/external /g;
s/external add_/external /g;
s/external vdd_/external /g;
s/CUDD_//g;
# NB: Pfff... Sed BSD limitation...
# s/camlidl_\(ml2c\|c2ml\|transl\|man\|hash\|cache\|bdd\|add\|zdd\|vdd\)/camlidl_cudd_\1/g;  
s/camlidl_ml2c/camlidl_cudd_ml2c/g;
s/camlidl_c2ml/camlidl_cudd_c2ml/g;
s/camlidl_transl/camlidl_cudd_transl/g;
s/camlidl_man/camlidl_cudd_man/g;
s/camlidl_hash/camlidl_cudd_hash/g;
s/camlidl_cache/camlidl_cudd_cache/g;
s/camlidl_bdd/camlidl_cudd_bdd/g;
s/camlidl_add/camlidl_cudd_add/g;
s/camlidl_zdd/camlidl_cudd_zdd/g;
s/camlidl_vdd/camlidl_cudd_vdd/g;
s/transfer : 'a t -> 'a Man.t -> 'a t/transfer : 'a t -> 'b Man.t -> 'b t/g;
